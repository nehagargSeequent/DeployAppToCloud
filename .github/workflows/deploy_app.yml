name: deploy_app

on: 
  # push:
  #   paths:
  #     - infrastructure/**
  #   branches:
  #     - main
  workflow_dispatch

env:
  RG_NAME: 'aks-golang-application'
  CLUSTER_NAME: 'aks-golang-application'
  SUBSCRIPTION_ID: '9c7e4d17-f551-45df-a7b8-2e0cfd252559'
  TENANT_ID: '9d3a50aa-06a0-4090-b99a-9b798edce6b8'

jobs:
  CreateCluster:
    name: 'Create AKS cluster for app'
    env:
      ARM_CLIENT_ID: ${{ secrets.SVC_KUBE_CLIENTID }}
      ARM_CLIENT_SECRET: ${{ secrets.SVC_KUBE_CLIENTSECRET }}
      ARM_SUBSCRIPTION_ID: $SUBSCRIPTION_ID
      ARM_TENANT_ID: $TENANT_ID
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - uses: hashicorp/setup-terraform@v1.2.1 

    - name: Terraform Format
      id: fmt
      run: |
        ls
        cd infrastructure
        terraform fmt -list=true -diff

    - name: Terraform Init
      id: init
      run: |
        cd infrastructure
        terraform init -backend-config=configs/backend.tfvars.json
    
    - name: Terraform Validate
      id: validate
      run: |
        cd infrastructure
        terraform validate -json  

    - name: Terraform Apply
      id: apply  
      run:  |
        cd infrastructure
        terraform apply -var-file=configs/infrastructure.tfvars.json --auto-approve
        
  DeployApp:
    name: 'Deploy app to the cluster'
    needs: [CreateCluster]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2 

    - name: Install Kubernetes
      uses: azure/setup-kubectl@v1
      id: install_kubectl
      with:
          version: 'v1.21.2'

    - name: Deploy app
      run: |
        set -euo pipefail

        az login --service-principal -u ${{ secrets.SVC_KUBE_CLIENTID }} -p ${{ secrets.SVC_KUBE_CLIENTSECRET }} --tenant ${{ env.TENANT_ID }}
        az account set -s ${{ env.SUBSCRIPTION_ID }}
        az account show            
        az aks get-credentials --resource-group ${{ env.RG_NAME }} --name ${{ env.CLUSTER_NAME }}     

        ls
        cd deployment
        kubectl apply -f secretproviderclass.yaml       
        kubectl apply -f golang-app.yaml
        kubectl apply -f golang-service.yaml

    - name: Verify app deployment
      run: |
        set -euo pipefail

        echo "Verify Cluster"
        echo "Checking nodes..."
        kubectl -n azure-golang get nodes
        
        echo "..."
        echo "Checking deployment status..."
        kubectl -n azure-golang get deployment
        
        echo "..."
        echo "Checking pods status..."
        kubectl -n azure-golang get pods

        echo "..."
        echo "Checking service status..."
        kubectl -n azure-golang get services
        
       
    
